{"version":3,"sources":["serviceWorker.ts","api/todolists-api.tsx","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistID","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","handleServerNetworkError","error","message","setAppStatusAC","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","key","className","Completed","Checkbox","checked","newIsDoneValue","changeTaskStatus","New","removeTask","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTaskAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entutyStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","thunk","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","newTodolist","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eee9cd5b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"3d3e74ba-244a-493d-82e2-37000cf7c4ef\"\r\n    }\r\n\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    ...settings\r\n})\r\n\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<Array<TodolistType>>('todo-lists')\r\n        return promise;\r\n    },\r\n    createTodolists(title: string) {\r\n       const promise = instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title: title})\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`)\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n        return promise\r\n    },\r\n    getTasks(todolistID: string) {\r\n        //возвращаем промис, тоже самое, что всерху\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistID}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTask(taskId: string, todolistId: string,  model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n        const promise = instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me');\r\n        return promise;\r\n    }\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    // completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n\r\n}","import {setAppErrorAC, setAppStatusAC, SetErrorActionsType, SetStatusActionsType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\"\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetStatusActionsType | SetErrorActionsType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch<SetStatusActionsType | SetErrorActionsType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error\"))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, SetErrorActionsType, SetStatusActionsType} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {addTaskAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\" :\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({\r\n    type: 'login/SET-IS-LOGGED-IN', value} as const\r\n)\r\n\r\n//thunks\r\nexport const loginTC = (data: LoginParamsType) =>  (dispatch: Dispatch<ActionsType | SetStatusActionsType | SetErrorActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n    .catch((error) => {\r\n    handleServerNetworkError(error, dispatch)\r\n})\r\n\r\n}\r\n\r\nexport const logoutTC = () =>  (dispatch: Dispatch<ActionsType | SetStatusActionsType | SetErrorActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\ntype initialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetStatusActionsType | SetErrorActionsType>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIED\":\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const  setAppErrorAC = (error: string | null) => ({\r\n    type: 'APP/SET-ERROR',\r\n    error\r\n} as const)\r\n\r\nexport const  setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\n\r\nexport const  setAppInitializedAC = (value: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIED',\r\n    value\r\n} as const)\r\n\r\nexport const initiaizedAppTC = () => (dispatch: Dispatch) => {\r\n        authAPI.me().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type SetErrorActionsType = ReturnType<typeof setAppErrorAC>\r\nexport type SetStatusActionsType = ReturnType<typeof setAppStatusAC>\r\nexport type ActionsType = SetErrorActionsType | SetStatusActionsType | ReturnType<typeof setAppInitializedAC>\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC, SetErrorActionsType, SetStatusActionsType} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: \"all\", entutyStatus: \"idle\" }\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entutyStatus: action.status} : tl)\r\n\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: 'all',\r\n                    entutyStatus: \"idle\"\r\n                }\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (id: string) => ({ type: 'REMOVE-TODOLIST', id: id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({ type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({ type: 'CHANGE-TODOLIST-STATUS', id: id, status: status} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: 'SET-TODOLISTS', todolists: todolists} as const)\r\n\r\n//thunks\r\n\r\nexport const fetchTodolistsTC = () => {\r\n\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolists(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id:string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entutyStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetStatusActionsType | SetErrorActionsType>","import {TasksStateType} from '../../trash/App';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {act} from \"react-dom/test-utils\";\r\nimport {setAppErrorAC, SetErrorActionsType, setAppStatusAC, SetStatusActionsType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\n\r\nconst initialState: TasksStateType = {\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)\r\n            }\r\n            // const stateCopy = {...state} // старый вариант - выше зарефакторинный код\r\n            // const tasks = stateCopy[action.todolistId];\r\n            // const newTasks = tasks.\r\n            // stateCopy[action.todolistId] = newTasks;\r\n            // return stateCopy;\r\n        }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        //     const stateCopy = {...state}\r\n        //     const newTask = action.task\r\n        //     const tasks = stateCopy[newTask.todoListId];\r\n        //     const newTasks = [newTask, ...tasks];\r\n        //     stateCopy[newTask.todoListId] = newTasks;\r\n        //     return stateCopy;\r\n        // }\r\n        case 'UPDATE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(task => task.id === action.taskId ? {...task, ...action.model}: task) }\r\n        //     let todolistTasks = state[action.todolistId];\r\n        //     state[action.todolistId] = todolistTasks\r\n        //         .map(t => t.id === action.taskId\r\n        //             ? {...t, ...action.model}\r\n        //             : t);\r\n        //     return ({...state});\r\n        // }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS': {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\n// export const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const)\r\nexport const setTaskAC = (tasks: Array<TaskType>, todolistId: string) => ({ type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n//thunks\r\nexport const fetchTaskTC = (todolistId: string) =>  (dispatch: Dispatch<ActionsType | SetStatusActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTaskAC(res.data.items, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then ( res => {\r\n                const action = removeTaskAC(taskId, todolistId);\r\n                dispatch(action);\r\n            })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string  ) => (dispatch: Dispatch<ActionsType | SetErrorActionsType | SetStatusActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const task = res.data.data.item;\r\n                    const action = addTaskAC(task)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch((error) => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n    }\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if(!task) {\r\n            console.warn(\"Task not found in the state\")\r\n            return;\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            status: task.status,\r\n            // можно так ...task но лучше как сейчас\r\n            title: task.title,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(taskId, todolistId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0)  {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n                    }\r\n\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n\r\n            }).catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTaskAC>\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetStatusActionsType | SetErrorActionsType>","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({addItem, disabled= false}: AddItemFormPropsType) => {\r\n    console.log(\"AddItemForm is called\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n} );\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {fetchTodolistsTC, FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTaskTC} from \"../tasks-reducer\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     status: TaskStatuses\r\n// }\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist is called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!demo) {\r\n            dispatch(fetchTaskTC(props.todolist.id))\r\n        } else {\r\n            return\r\n        }\r\n\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        debugger\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.changeFilter, props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entutyStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entutyStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(demo || isLoggedIn) {\r\n            dispatch(fetchTodolistsTC())\r\n        } else {\r\n            return\r\n        }\r\n\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch]);\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        debugger\r\n        const action = addTaskTC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status: status}, todolistId);\r\n        dispatch(thunk);\r\n    }, []);\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const thunk = changeTodolistTitleTC(id, title);\r\n        dispatch(thunk);\r\n    }, [])\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodolistTasks;\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n    );\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if(!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if(!values.password) {\r\n                debugger\r\n              return {\r\n               password: \"Password is required\"\r\n                    }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")}\r\n                            checked={formik.values.rememberMe}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from \"./../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initiaizedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n/*\r\nconst Fake = React.memo(function() {\r\n    console.log(\"FAKE\")\r\n    const arr = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks.count)\r\n    return <h1>{arr.length}</h1>\r\n})\r\n*/\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initiaizedAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div style={ {position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"} }>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                { status === \"loading\" && <LinearProgress /> }\r\n\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                <Route path={\"/login\"} render={() => <Login/>}/>\r\n\r\n            </Container>\r\n        </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\n\r\n\r\n// {\r\n        //     todolists.map(tl => {\r\n        //         let allTodolistTasks = tasks[tl.id];\r\n        //         let tasksForTodolist = allTodolistTasks;\r\n        //\r\n        //         return (\r\n        //         <Grid item key={tl.id}>\r\n        //             <Paper style={{padding: \"10px\"}}>\r\n        //                 <Todolist\r\n        //                     id={tl.id}\r\n        //                     title={tl.title}\r\n        //                     tasks={tasksForTodolist}\r\n        //                     removeTask={removeTask}\r\n        //                     changeFilter={changeFilter}\r\n        //                     addTask={addTask}\r\n        //                     changeTaskStatus={changeStatus}\r\n        //                     filter={tl.filter}\r\n        //                     removeTodolist={removeTodolist}\r\n        //                     changeTaskTitle={changeTaskTitle}\r\n        //                     changeTodolistTitle={changeTodolistTitle}\r\n        //                 />\r\n        //             </Paper>\r\n        //         </Grid>)\r\n        //     })\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}