{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onAddItemClick","trim","addItem","onBlur","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","saveTitle","onDoubleClick","TodoList","jsxTasks","tasks","map","t","key","id","className","filter","isDone","Checkbox","checked","event","newIsDoneValue","changeStatus","newTitle","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","Button","changeFilter","elementPadding","padding","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","newTask","task","find","todoList","tl","console","dir","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","newTodoListID","spacing","allTasks","tasksForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0fd73bb0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState<string>(\"\");\r\n    let [error, setError] = useState<string|null>(null);\r\n\r\n    const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddItemClick = () => {\r\n        if(title.trim() !== \"\"){\r\n            props.addItem(title);\r\n\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent) => {\r\n        setError(null);\r\n        if(e.charCode === 13){\r\n            onAddItemClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onBlur={()=> setError(null)}>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onTitleChange}\r\n                onKeyPress={onKeyPressAddItem}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                // className={error ? \"error\" : \"\"}\r\n            />\r\n            {/*<input*/}\r\n            {/*    type=\"text\"*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={onTitleChange}*/}\r\n            {/*    onKeyPress={onKeyPressAddItem}*/}\r\n            {/*    className={error ? \"error\" : \"\"}*/}\r\n            {/*/>*/}\r\n            <IconButton color={\"primary\"} onClick={onAddItemClick}>\r\n                <AddBox />\r\n            </IconButton>\r\n            {/*<Button variant={\"contained\"} color={\"primary\"} onClick={onAddItemClick}>+</Button>*/}\r\n            {/*<button onClick={onAddItemClick}>add</button>*/}\r\n            {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {useState, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string,\r\n    saveTitle: (newTitle: string) => void\r\n}\r\n\r\n\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n    let [editMode, setEditMode] = useState <boolean>(false)\r\n    let [title, setTitle] = useState <string>(props.title)\r\n\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        if(title.trim()){\r\n            props.saveTitle(title);\r\n        } else {\r\n            setTitle(props.title)\r\n        }\r\n        setEditMode(false);\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                autoFocus={true}\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n            />\r\n            // ? <input\r\n            //     value={title}\r\n            //     autoFocus={true}\r\n            //     onBlur={offEditMode}\r\n            //     onChange={chan1geTitle}\r\n            // />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n\r\n}\r\n\r\nexport  default EditableSpan;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValueType, TaskType} from './App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {AddBox, Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValueType,\r\n    tasks: Array<TaskType>,\r\n    removeTask: (id: string, todoListID: string) => void,\r\n    changeFilter: (id: string, value: FilterValueType) => void,\r\n    addTask: (title: string, todoListID: string) => void,\r\n    changeStatus: (id: string, isDone: boolean, todoListID: string) => void,\r\n    removeTodoList: (id: string) => void,\r\n    changeTaskTitle: (id: string, title: string, todoListID: string) => void,\r\n    changeTodoListTitle: (title: string, todoListID: string ) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n\r\n    // let [title, setTitle] = useState<string>(\"\");\r\n    // let [error, setError] = useState<string|null>(null)\r\n\r\n    let jsxTasks = props.tasks.map((t) => {\r\n\r\n        const onStatusChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = event.currentTarget.checked;\r\n            props.changeStatus(t.id, newIsDoneValue, props.id);\r\n        }\r\n\r\n        const onTitleChangeCallback = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id, newTitle, props.id);\r\n        }\r\n\r\n        return (\r\n            <div key={t.id} className={(props.filter === \"all\" && t.isDone) ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                    onChange={onStatusChangeHandler}\r\n                />\r\n                {/*<input type=\"checkbox\" checked={t.isDone} onChange={onStatusChangeHandler}/>*/}\r\n                <EditableSpan title={t.title} saveTitle={onTitleChangeCallback}/>\r\n                <IconButton color={\"primary\"} onClick={()=>{props.removeTask(t.id, props.id)}}>\r\n                    <Delete />\r\n                </IconButton>\r\n                {/*<button onClick={()=>{props.removeTask(t.id, props.id)}}>x</button>*/}\r\n            </div>\r\n        )\r\n    });\r\n\r\n    // const onAddTaskClick = () => {\r\n    //     if(title.trim() !== \"\"){\r\n    //         props.addTask(title, props.id);\r\n    //\r\n    //     } else {\r\n    //         setError(\"Title is required\")\r\n    //     }\r\n    //     setTitle(\"\");\r\n    // }\r\n\r\n    const onAllChangeFilter = () => props.changeFilter(props.id,\"all\")\r\n    const onActiveChangeFilter = () => props.changeFilter(props.id,\"active\")\r\n    const onCompletedChangeFilter = () => props.changeFilter(props.id,\"completed\")\r\n    // const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     setError(null);\r\n    //     setTitle(e.currentTarget.value)\r\n    // }\r\n    // const onKeyPressAddTask = (e: KeyboardEvent) => {\r\n    //     setError(null);\r\n    //     if(e.charCode === 13){\r\n    //         onAddTaskClick()\r\n    //     }\r\n    // }\r\n    const createTaskTitle = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n    const deleteTodoList = () => props.removeTodoList(props.id)\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(title, props.id )\r\n    }\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\" ;\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<h3>{props.title}<button onClick={deleteTodoList}>x</button></h3>*/}\r\n            <h3>\r\n                <EditableSpan title={props.title} saveTitle={changeTodoListTitle} />\r\n                {/*<button onClick={deleteTodoList}>x</button>*/}\r\n                <IconButton onClick={deleteTodoList}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={createTaskTitle} />\r\n            {/*<div>*/}\r\n            {/*    <input*/}\r\n            {/*        type=\"text\"*/}\r\n            {/*        value={title}*/}\r\n            {/*        onChange={onTitleChange}*/}\r\n            {/*        onKeyPress={onKeyPressAddTask}*/}\r\n            {/*        className={error ? \"error\" : \"\"}*/}\r\n            {/*    />*/}\r\n            {/*    <button onClick={onAddTaskClick}>add</button>*/}\r\n            {/*    {error && <div className={\"error-message\"}>{error}</div>}*/}\r\n            {/*</div>*/}\r\n            <div>\r\n                { jsxTasks }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    // className={allBtnClass}\r\n                    onClick={onAllChangeFilter}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"outlined\"}\r\n                >All</Button>\r\n                <Button\r\n                    // className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveChangeFilter}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"outlined\"}\r\n                >Active</Button>\r\n                <Button\r\n                    // className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedChangeFilter}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"outlined\"}\r\n                >Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {CSSProperties, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    isDone: boolean,\r\n    title: string\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nlet elementPadding: CSSProperties = {padding: \"15px\"};\r\n\r\nfunction App() {\r\n\r\n    let todoListID1 = v1();\r\n    let todoListID2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"Books\", filter: \"all\"},\r\n        {id: todoListID2, title: \"Songs\", filter: \"all\"},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), isDone: true, title: \"JS\"},\r\n            {id: v1(), isDone: true, title: \"React\"},\r\n            {id: v1(), isDone: false, title: \"Redux\"},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), isDone: false, title: \"RestAPI\"},\r\n            {id: v1(), isDone: false, title: \"GraphQL\"},\r\n        ]\r\n    });\r\n    console.dir(setTasks);\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false};\r\n        let todoListTasks = tasks[todoListID];\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(task => task.id === id);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID];\r\n        let task = todoListTasks.find(task => task.id === id);\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeFilter(id: string, value: FilterValueType) {\r\n        let todoList = todoLists.find(tl => tl.id === id);\r\n        if (todoList) {\r\n            todoList.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== id));\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListID = v1();\r\n        let newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListID);\r\n        if (todoList) {\r\n            todoList.title = newTitle;\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={elementPadding}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        let allTasks = tasks[tl.id];\r\n                        let tasksForTodoList = allTasks;\r\n\r\n                        if (tl.filter === \"active\") {\r\n                            tasksForTodoList = allTasks.filter(t => t.isDone === false)\r\n                        }\r\n                        if (tl.filter === \"completed\") {\r\n                            tasksForTodoList = allTasks.filter(t => t.isDone === true)\r\n                        }\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={elementPadding}  elevation={3}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}